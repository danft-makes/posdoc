

# This file was *autogenerated* from the file generate_generic_lines_ex2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
load('../utils.sage')
C1 = x*z ; C2 = z**_sage_const_2 -x*y ; f = (C2)*(C2+C1)*(C2-C1) ; C = Curve(f)

"""
How to generate generic lines?
L is generic to C if for every intersection point P we have that the intersection multiplicity is minimal?
"""
limit = _sage_const_2 
triples = [(a, b, c) for a in range(_sage_const_1 , limit + _sage_const_1 )
                    for b in range(_sage_const_1 , limit + _sage_const_1 )
                    for c in range(_sage_const_1 , limit + _sage_const_1 )
                    if gcd_of_three(a, b, c) == _sage_const_1 ]

triples = [(_sage_const_0 ,_sage_const_0 ,_sage_const_1 )]

Lines = triples
kbar = QQbar
Rbar = PolynomialRing(kbar,_sage_const_3 , names=('x', 'y', 'z',)); (x, y, z,) = Rbar._first_ngens(3)
P2bar=ProjectiveSpace(Rbar)
GenericLines = []
from tqdm import tqdm
for a,b,c in tqdm(Lines, desc="Generating Lines"):
    l = a*x+b*y+c*z ; Lbar=Curve(Rbar(l),P2bar) ; Cbar = Curve(Rbar(f),P2bar)
    CcupL = Curve(Rbar(f)*Rbar(l),P2bar)
    CcapL = Cbar.intersection(Lbar)
    cap_pts = CcapL.rational_points()
    culprits = _sage_const_0 
    for pt in cap_pts:
        # Check if pt is ordinary in C\cupL
        is_ordinary = CcupL.is_ordinary_singularity(pt)
        # Check if the point was a singularity before
        tangents = Cbar.tangents(pt) ; number_tangents = len(tangents)
        if (not is_ordinary):
            print(f"{(a,b,c)}: Point {pt} is not ordinary singularity in CcupL")
            culprits +=_sage_const_1 
        if (number_tangents>_sage_const_1 ):
            print(f"{(a,b,c)}: Point {pt} has {number_tangents} in C")
            culprits +=_sage_const_1 
    if culprits==_sage_const_0 :
        GenericLines.append((a,b,c))

with open("generic_lines_ex2.txt", "w") as file:
    for tup in GenericLines:
        file.write(','.join(map(str, tup)) + '\n')



